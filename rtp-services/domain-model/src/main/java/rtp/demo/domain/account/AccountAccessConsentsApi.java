/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package rtp.demo.domain.account;

import io.swagger.annotations.*;
import rtp.demo.domain.account.OBErrorResponse1;
import rtp.demo.domain.account.OBReadConsent1;
import rtp.demo.domain.account.OBReadConsentResponse1;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-20T02:23:06.926-04:00[America/New_York]")
@Api(value = "account-access-consents", description = "the account-access-consents API")
public interface AccountAccessConsentsApi {

    @ApiOperation(value = "Create Account Access Consents", nickname = "createAccountAccessConsents", notes = "", response = OBReadConsentResponse1.class, authorizations = {
        @Authorization(value = "TPPOAuth2Security", scopes = { 
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })    }, tags={ "Account Access", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account Access Consents Created", response = OBReadConsentResponse1.class),
        @ApiResponse(code = 400, message = "Bad request", response = OBErrorResponse1.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden", response = OBErrorResponse1.class),
        @ApiResponse(code = 405, message = "Method Not Allowed"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = OBErrorResponse1.class) })
    @RequestMapping(value = "/account-access-consents",
        produces = { "application/json; charset=utf-8", "application/jose+jwe" }, 
        consumes = { "application/json; charset=utf-8", "application/jose+jwe" },
        method = RequestMethod.POST)
    ResponseEntity<OBReadConsentResponse1> createAccountAccessConsents(@ApiParam(value = "Default" ,required=true )  @Valid @RequestBody OBReadConsent1 body
,@ApiParam(value = "An Authorisation Token as per https://tools.ietf.org/html/rfc6750" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization
,@ApiParam(value = "The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC" ) @RequestHeader(value="x-fapi-auth-date", required=false) String xFapiAuthDate
,@ApiParam(value = "The PSU's IP address if the PSU is currently logged in with the TPP." ) @RequestHeader(value="x-fapi-customer-ip-address", required=false) String xFapiCustomerIpAddress
,@ApiParam(value = "An RFC4122 UID used as a correlation id." ) @RequestHeader(value="x-fapi-interaction-id", required=false) String xFapiInteractionId
,@ApiParam(value = "Indicates the user-agent that the PSU is using." ) @RequestHeader(value="x-customer-user-agent", required=false) String xCustomerUserAgent
);


    @ApiOperation(value = "Delete Account Access Consents", nickname = "deleteAccountAccessConsentsConsentId", notes = "", authorizations = {
        @Authorization(value = "TPPOAuth2Security", scopes = { 
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })    }, tags={ "Account Access", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Account Access Consents Deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = OBErrorResponse1.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden", response = OBErrorResponse1.class),
        @ApiResponse(code = 405, message = "Method Not Allowed"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 429, message = "Too Many Requests"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = OBErrorResponse1.class) })
    @RequestMapping(value = "/account-access-consents/{ConsentId}",
        produces = { "application/json; charset=utf-8", "application/jose+jwe" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAccountAccessConsentsConsentId(@ApiParam(value = "ConsentId",required=true) @PathVariable("ConsentId") String consentId
,@ApiParam(value = "An Authorisation Token as per https://tools.ietf.org/html/rfc6750" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization
,@ApiParam(value = "The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC" ) @RequestHeader(value="x-fapi-auth-date", required=false) String xFapiAuthDate
,@ApiParam(value = "The PSU's IP address if the PSU is currently logged in with the TPP." ) @RequestHeader(value="x-fapi-customer-ip-address", required=false) String xFapiCustomerIpAddress
,@ApiParam(value = "An RFC4122 UID used as a correlation id." ) @RequestHeader(value="x-fapi-interaction-id", required=false) String xFapiInteractionId
,@ApiParam(value = "Indicates the user-agent that the PSU is using." ) @RequestHeader(value="x-customer-user-agent", required=false) String xCustomerUserAgent
);


    @ApiOperation(value = "Get Account Access Consents", nickname = "getAccountAccessConsentsConsentId", notes = "", response = OBReadConsentResponse1.class, authorizations = {
        @Authorization(value = "TPPOAuth2Security", scopes = { 
            @AuthorizationScope(scope = "accounts", description = "Ability to read Accounts information")
            })    }, tags={ "Account Access", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account Access Consents Read", response = OBReadConsentResponse1.class),
        @ApiResponse(code = 400, message = "Bad request", response = OBErrorResponse1.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden", response = OBErrorResponse1.class),
        @ApiResponse(code = 405, message = "Method Not Allowed"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 429, message = "Too Many Requests"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = OBErrorResponse1.class) })
    @RequestMapping(value = "/account-access-consents/{ConsentId}",
        produces = { "application/json; charset=utf-8", "application/jose+jwe" }, 
        method = RequestMethod.GET)
    ResponseEntity<OBReadConsentResponse1> getAccountAccessConsentsConsentId(@ApiParam(value = "ConsentId",required=true) @PathVariable("ConsentId") String consentId
,@ApiParam(value = "An Authorisation Token as per https://tools.ietf.org/html/rfc6750" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization
,@ApiParam(value = "The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC" ) @RequestHeader(value="x-fapi-auth-date", required=false) String xFapiAuthDate
,@ApiParam(value = "The PSU's IP address if the PSU is currently logged in with the TPP." ) @RequestHeader(value="x-fapi-customer-ip-address", required=false) String xFapiCustomerIpAddress
,@ApiParam(value = "An RFC4122 UID used as a correlation id." ) @RequestHeader(value="x-fapi-interaction-id", required=false) String xFapiInteractionId
,@ApiParam(value = "Indicates the user-agent that the PSU is using." ) @RequestHeader(value="x-customer-user-agent", required=false) String xCustomerUserAgent
);

}
